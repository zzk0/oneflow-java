// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/resource.proto

package org.oneflow.core.job;

/**
 * Protobuf type {@code oneflow.CollectiveBoxingConf}
 */
public  final class CollectiveBoxingConf extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:oneflow.CollectiveBoxingConf)
    CollectiveBoxingConfOrBuilder {
  // Use CollectiveBoxingConf.newBuilder() to construct.
  private CollectiveBoxingConf(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CollectiveBoxingConf() {
    enableFusion_ = true;
    numCallbackThreads_ = 4L;
    ncclNumStreams_ = 1L;
    ncclFusionThresholdMb_ = 16L;
    ncclFusionAllReduce_ = true;
    ncclFusionReduceScatter_ = false;
    ncclFusionAllGather_ = false;
    ncclFusionReduce_ = true;
    ncclFusionBroadcast_ = true;
    ncclFusionAllReduceUseBuffer_ = false;
    ncclFusionMaxOps_ = 64L;
    ncclEnableAllToAll_ = false;
    ncclEnableMixedFusion_ = false;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CollectiveBoxingConf(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            enableFusion_ = input.readBool();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            numCallbackThreads_ = input.readInt64();
            break;
          }
          case 808: {
            bitField0_ |= 0x00000004;
            ncclNumStreams_ = input.readInt64();
            break;
          }
          case 816: {
            bitField0_ |= 0x00000008;
            ncclFusionThresholdMb_ = input.readInt64();
            break;
          }
          case 824: {
            bitField0_ |= 0x00000010;
            ncclFusionAllReduce_ = input.readBool();
            break;
          }
          case 832: {
            bitField0_ |= 0x00000020;
            ncclFusionReduceScatter_ = input.readBool();
            break;
          }
          case 840: {
            bitField0_ |= 0x00000040;
            ncclFusionAllGather_ = input.readBool();
            break;
          }
          case 848: {
            bitField0_ |= 0x00000080;
            ncclFusionReduce_ = input.readBool();
            break;
          }
          case 856: {
            bitField0_ |= 0x00000100;
            ncclFusionBroadcast_ = input.readBool();
            break;
          }
          case 864: {
            bitField0_ |= 0x00000200;
            ncclFusionAllReduceUseBuffer_ = input.readBool();
            break;
          }
          case 872: {
            bitField0_ |= 0x00000400;
            ncclFusionMaxOps_ = input.readInt64();
            break;
          }
          case 880: {
            bitField0_ |= 0x00000800;
            ncclEnableAllToAll_ = input.readBool();
            break;
          }
          case 888: {
            bitField0_ |= 0x00001000;
            ncclEnableMixedFusion_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CollectiveBoxingConf_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CollectiveBoxingConf_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.oneflow.core.job.CollectiveBoxingConf.class, org.oneflow.core.job.CollectiveBoxingConf.Builder.class);
  }

  private int bitField0_;
  public static final int ENABLE_FUSION_FIELD_NUMBER = 1;
  private boolean enableFusion_;
  /**
   * <pre>
   * global
   * </pre>
   *
   * <code>optional bool enable_fusion = 1 [default = true];</code>
   */
  public boolean hasEnableFusion() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <pre>
   * global
   * </pre>
   *
   * <code>optional bool enable_fusion = 1 [default = true];</code>
   */
  public boolean getEnableFusion() {
    return enableFusion_;
  }

  public static final int NUM_CALLBACK_THREADS_FIELD_NUMBER = 2;
  private long numCallbackThreads_;
  /**
   * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
   */
  public boolean hasNumCallbackThreads() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
   */
  public long getNumCallbackThreads() {
    return numCallbackThreads_;
  }

  public static final int NCCL_NUM_STREAMS_FIELD_NUMBER = 101;
  private long ncclNumStreams_;
  /**
   * <pre>
   * nccl
   * </pre>
   *
   * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
   */
  public boolean hasNcclNumStreams() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <pre>
   * nccl
   * </pre>
   *
   * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
   */
  public long getNcclNumStreams() {
    return ncclNumStreams_;
  }

  public static final int NCCL_FUSION_THRESHOLD_MB_FIELD_NUMBER = 102;
  private long ncclFusionThresholdMb_;
  /**
   * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
   */
  public boolean hasNcclFusionThresholdMb() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
   */
  public long getNcclFusionThresholdMb() {
    return ncclFusionThresholdMb_;
  }

  public static final int NCCL_FUSION_ALL_REDUCE_FIELD_NUMBER = 103;
  private boolean ncclFusionAllReduce_;
  /**
   * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
   */
  public boolean hasNcclFusionAllReduce() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
   */
  public boolean getNcclFusionAllReduce() {
    return ncclFusionAllReduce_;
  }

  public static final int NCCL_FUSION_REDUCE_SCATTER_FIELD_NUMBER = 104;
  private boolean ncclFusionReduceScatter_;
  /**
   * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
   */
  public boolean hasNcclFusionReduceScatter() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
   */
  public boolean getNcclFusionReduceScatter() {
    return ncclFusionReduceScatter_;
  }

  public static final int NCCL_FUSION_ALL_GATHER_FIELD_NUMBER = 105;
  private boolean ncclFusionAllGather_;
  /**
   * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
   */
  public boolean hasNcclFusionAllGather() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
   */
  public boolean getNcclFusionAllGather() {
    return ncclFusionAllGather_;
  }

  public static final int NCCL_FUSION_REDUCE_FIELD_NUMBER = 106;
  private boolean ncclFusionReduce_;
  /**
   * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
   */
  public boolean hasNcclFusionReduce() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
   */
  public boolean getNcclFusionReduce() {
    return ncclFusionReduce_;
  }

  public static final int NCCL_FUSION_BROADCAST_FIELD_NUMBER = 107;
  private boolean ncclFusionBroadcast_;
  /**
   * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
   */
  public boolean hasNcclFusionBroadcast() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
   */
  public boolean getNcclFusionBroadcast() {
    return ncclFusionBroadcast_;
  }

  public static final int NCCL_FUSION_ALL_REDUCE_USE_BUFFER_FIELD_NUMBER = 108;
  private boolean ncclFusionAllReduceUseBuffer_;
  /**
   * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
   */
  public boolean hasNcclFusionAllReduceUseBuffer() {
    return ((bitField0_ & 0x00000200) == 0x00000200);
  }
  /**
   * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
   */
  public boolean getNcclFusionAllReduceUseBuffer() {
    return ncclFusionAllReduceUseBuffer_;
  }

  public static final int NCCL_FUSION_MAX_OPS_FIELD_NUMBER = 109;
  private long ncclFusionMaxOps_;
  /**
   * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
   */
  public boolean hasNcclFusionMaxOps() {
    return ((bitField0_ & 0x00000400) == 0x00000400);
  }
  /**
   * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
   */
  public long getNcclFusionMaxOps() {
    return ncclFusionMaxOps_;
  }

  public static final int NCCL_ENABLE_ALL_TO_ALL_FIELD_NUMBER = 110;
  private boolean ncclEnableAllToAll_;
  /**
   * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
   */
  public boolean hasNcclEnableAllToAll() {
    return ((bitField0_ & 0x00000800) == 0x00000800);
  }
  /**
   * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
   */
  public boolean getNcclEnableAllToAll() {
    return ncclEnableAllToAll_;
  }

  public static final int NCCL_ENABLE_MIXED_FUSION_FIELD_NUMBER = 111;
  private boolean ncclEnableMixedFusion_;
  /**
   * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
   */
  public boolean hasNcclEnableMixedFusion() {
    return ((bitField0_ & 0x00001000) == 0x00001000);
  }
  /**
   * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
   */
  public boolean getNcclEnableMixedFusion() {
    return ncclEnableMixedFusion_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBool(1, enableFusion_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt64(2, numCallbackThreads_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt64(101, ncclNumStreams_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt64(102, ncclFusionThresholdMb_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeBool(103, ncclFusionAllReduce_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(104, ncclFusionReduceScatter_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(105, ncclFusionAllGather_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(106, ncclFusionReduce_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(107, ncclFusionBroadcast_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      output.writeBool(108, ncclFusionAllReduceUseBuffer_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      output.writeInt64(109, ncclFusionMaxOps_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      output.writeBool(110, ncclEnableAllToAll_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      output.writeBool(111, ncclEnableMixedFusion_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, enableFusion_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, numCallbackThreads_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(101, ncclNumStreams_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(102, ncclFusionThresholdMb_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(103, ncclFusionAllReduce_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(104, ncclFusionReduceScatter_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(105, ncclFusionAllGather_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(106, ncclFusionReduce_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(107, ncclFusionBroadcast_);
    }
    if (((bitField0_ & 0x00000200) == 0x00000200)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(108, ncclFusionAllReduceUseBuffer_);
    }
    if (((bitField0_ & 0x00000400) == 0x00000400)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(109, ncclFusionMaxOps_);
    }
    if (((bitField0_ & 0x00000800) == 0x00000800)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(110, ncclEnableAllToAll_);
    }
    if (((bitField0_ & 0x00001000) == 0x00001000)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(111, ncclEnableMixedFusion_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.oneflow.core.job.CollectiveBoxingConf)) {
      return super.equals(obj);
    }
    org.oneflow.core.job.CollectiveBoxingConf other = (org.oneflow.core.job.CollectiveBoxingConf) obj;

    boolean result = true;
    result = result && (hasEnableFusion() == other.hasEnableFusion());
    if (hasEnableFusion()) {
      result = result && (getEnableFusion()
          == other.getEnableFusion());
    }
    result = result && (hasNumCallbackThreads() == other.hasNumCallbackThreads());
    if (hasNumCallbackThreads()) {
      result = result && (getNumCallbackThreads()
          == other.getNumCallbackThreads());
    }
    result = result && (hasNcclNumStreams() == other.hasNcclNumStreams());
    if (hasNcclNumStreams()) {
      result = result && (getNcclNumStreams()
          == other.getNcclNumStreams());
    }
    result = result && (hasNcclFusionThresholdMb() == other.hasNcclFusionThresholdMb());
    if (hasNcclFusionThresholdMb()) {
      result = result && (getNcclFusionThresholdMb()
          == other.getNcclFusionThresholdMb());
    }
    result = result && (hasNcclFusionAllReduce() == other.hasNcclFusionAllReduce());
    if (hasNcclFusionAllReduce()) {
      result = result && (getNcclFusionAllReduce()
          == other.getNcclFusionAllReduce());
    }
    result = result && (hasNcclFusionReduceScatter() == other.hasNcclFusionReduceScatter());
    if (hasNcclFusionReduceScatter()) {
      result = result && (getNcclFusionReduceScatter()
          == other.getNcclFusionReduceScatter());
    }
    result = result && (hasNcclFusionAllGather() == other.hasNcclFusionAllGather());
    if (hasNcclFusionAllGather()) {
      result = result && (getNcclFusionAllGather()
          == other.getNcclFusionAllGather());
    }
    result = result && (hasNcclFusionReduce() == other.hasNcclFusionReduce());
    if (hasNcclFusionReduce()) {
      result = result && (getNcclFusionReduce()
          == other.getNcclFusionReduce());
    }
    result = result && (hasNcclFusionBroadcast() == other.hasNcclFusionBroadcast());
    if (hasNcclFusionBroadcast()) {
      result = result && (getNcclFusionBroadcast()
          == other.getNcclFusionBroadcast());
    }
    result = result && (hasNcclFusionAllReduceUseBuffer() == other.hasNcclFusionAllReduceUseBuffer());
    if (hasNcclFusionAllReduceUseBuffer()) {
      result = result && (getNcclFusionAllReduceUseBuffer()
          == other.getNcclFusionAllReduceUseBuffer());
    }
    result = result && (hasNcclFusionMaxOps() == other.hasNcclFusionMaxOps());
    if (hasNcclFusionMaxOps()) {
      result = result && (getNcclFusionMaxOps()
          == other.getNcclFusionMaxOps());
    }
    result = result && (hasNcclEnableAllToAll() == other.hasNcclEnableAllToAll());
    if (hasNcclEnableAllToAll()) {
      result = result && (getNcclEnableAllToAll()
          == other.getNcclEnableAllToAll());
    }
    result = result && (hasNcclEnableMixedFusion() == other.hasNcclEnableMixedFusion());
    if (hasNcclEnableMixedFusion()) {
      result = result && (getNcclEnableMixedFusion()
          == other.getNcclEnableMixedFusion());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasEnableFusion()) {
      hash = (37 * hash) + ENABLE_FUSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableFusion());
    }
    if (hasNumCallbackThreads()) {
      hash = (37 * hash) + NUM_CALLBACK_THREADS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNumCallbackThreads());
    }
    if (hasNcclNumStreams()) {
      hash = (37 * hash) + NCCL_NUM_STREAMS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNcclNumStreams());
    }
    if (hasNcclFusionThresholdMb()) {
      hash = (37 * hash) + NCCL_FUSION_THRESHOLD_MB_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNcclFusionThresholdMb());
    }
    if (hasNcclFusionAllReduce()) {
      hash = (37 * hash) + NCCL_FUSION_ALL_REDUCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionAllReduce());
    }
    if (hasNcclFusionReduceScatter()) {
      hash = (37 * hash) + NCCL_FUSION_REDUCE_SCATTER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionReduceScatter());
    }
    if (hasNcclFusionAllGather()) {
      hash = (37 * hash) + NCCL_FUSION_ALL_GATHER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionAllGather());
    }
    if (hasNcclFusionReduce()) {
      hash = (37 * hash) + NCCL_FUSION_REDUCE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionReduce());
    }
    if (hasNcclFusionBroadcast()) {
      hash = (37 * hash) + NCCL_FUSION_BROADCAST_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionBroadcast());
    }
    if (hasNcclFusionAllReduceUseBuffer()) {
      hash = (37 * hash) + NCCL_FUSION_ALL_REDUCE_USE_BUFFER_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclFusionAllReduceUseBuffer());
    }
    if (hasNcclFusionMaxOps()) {
      hash = (37 * hash) + NCCL_FUSION_MAX_OPS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getNcclFusionMaxOps());
    }
    if (hasNcclEnableAllToAll()) {
      hash = (37 * hash) + NCCL_ENABLE_ALL_TO_ALL_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclEnableAllToAll());
    }
    if (hasNcclEnableMixedFusion()) {
      hash = (37 * hash) + NCCL_ENABLE_MIXED_FUSION_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getNcclEnableMixedFusion());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CollectiveBoxingConf parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.oneflow.core.job.CollectiveBoxingConf prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code oneflow.CollectiveBoxingConf}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:oneflow.CollectiveBoxingConf)
      org.oneflow.core.job.CollectiveBoxingConfOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CollectiveBoxingConf_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CollectiveBoxingConf_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.oneflow.core.job.CollectiveBoxingConf.class, org.oneflow.core.job.CollectiveBoxingConf.Builder.class);
    }

    // Construct using org.oneflow.core.job.CollectiveBoxingConf.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      enableFusion_ = true;
      bitField0_ = (bitField0_ & ~0x00000001);
      numCallbackThreads_ = 4L;
      bitField0_ = (bitField0_ & ~0x00000002);
      ncclNumStreams_ = 1L;
      bitField0_ = (bitField0_ & ~0x00000004);
      ncclFusionThresholdMb_ = 16L;
      bitField0_ = (bitField0_ & ~0x00000008);
      ncclFusionAllReduce_ = true;
      bitField0_ = (bitField0_ & ~0x00000010);
      ncclFusionReduceScatter_ = false;
      bitField0_ = (bitField0_ & ~0x00000020);
      ncclFusionAllGather_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      ncclFusionReduce_ = true;
      bitField0_ = (bitField0_ & ~0x00000080);
      ncclFusionBroadcast_ = true;
      bitField0_ = (bitField0_ & ~0x00000100);
      ncclFusionAllReduceUseBuffer_ = false;
      bitField0_ = (bitField0_ & ~0x00000200);
      ncclFusionMaxOps_ = 64L;
      bitField0_ = (bitField0_ & ~0x00000400);
      ncclEnableAllToAll_ = false;
      bitField0_ = (bitField0_ & ~0x00000800);
      ncclEnableMixedFusion_ = false;
      bitField0_ = (bitField0_ & ~0x00001000);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CollectiveBoxingConf_descriptor;
    }

    public org.oneflow.core.job.CollectiveBoxingConf getDefaultInstanceForType() {
      return org.oneflow.core.job.CollectiveBoxingConf.getDefaultInstance();
    }

    public org.oneflow.core.job.CollectiveBoxingConf build() {
      org.oneflow.core.job.CollectiveBoxingConf result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.oneflow.core.job.CollectiveBoxingConf buildPartial() {
      org.oneflow.core.job.CollectiveBoxingConf result = new org.oneflow.core.job.CollectiveBoxingConf(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.enableFusion_ = enableFusion_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.numCallbackThreads_ = numCallbackThreads_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.ncclNumStreams_ = ncclNumStreams_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.ncclFusionThresholdMb_ = ncclFusionThresholdMb_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.ncclFusionAllReduce_ = ncclFusionAllReduce_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.ncclFusionReduceScatter_ = ncclFusionReduceScatter_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.ncclFusionAllGather_ = ncclFusionAllGather_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.ncclFusionReduce_ = ncclFusionReduce_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.ncclFusionBroadcast_ = ncclFusionBroadcast_;
      if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
        to_bitField0_ |= 0x00000200;
      }
      result.ncclFusionAllReduceUseBuffer_ = ncclFusionAllReduceUseBuffer_;
      if (((from_bitField0_ & 0x00000400) == 0x00000400)) {
        to_bitField0_ |= 0x00000400;
      }
      result.ncclFusionMaxOps_ = ncclFusionMaxOps_;
      if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
        to_bitField0_ |= 0x00000800;
      }
      result.ncclEnableAllToAll_ = ncclEnableAllToAll_;
      if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
        to_bitField0_ |= 0x00001000;
      }
      result.ncclEnableMixedFusion_ = ncclEnableMixedFusion_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.oneflow.core.job.CollectiveBoxingConf) {
        return mergeFrom((org.oneflow.core.job.CollectiveBoxingConf)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.oneflow.core.job.CollectiveBoxingConf other) {
      if (other == org.oneflow.core.job.CollectiveBoxingConf.getDefaultInstance()) return this;
      if (other.hasEnableFusion()) {
        setEnableFusion(other.getEnableFusion());
      }
      if (other.hasNumCallbackThreads()) {
        setNumCallbackThreads(other.getNumCallbackThreads());
      }
      if (other.hasNcclNumStreams()) {
        setNcclNumStreams(other.getNcclNumStreams());
      }
      if (other.hasNcclFusionThresholdMb()) {
        setNcclFusionThresholdMb(other.getNcclFusionThresholdMb());
      }
      if (other.hasNcclFusionAllReduce()) {
        setNcclFusionAllReduce(other.getNcclFusionAllReduce());
      }
      if (other.hasNcclFusionReduceScatter()) {
        setNcclFusionReduceScatter(other.getNcclFusionReduceScatter());
      }
      if (other.hasNcclFusionAllGather()) {
        setNcclFusionAllGather(other.getNcclFusionAllGather());
      }
      if (other.hasNcclFusionReduce()) {
        setNcclFusionReduce(other.getNcclFusionReduce());
      }
      if (other.hasNcclFusionBroadcast()) {
        setNcclFusionBroadcast(other.getNcclFusionBroadcast());
      }
      if (other.hasNcclFusionAllReduceUseBuffer()) {
        setNcclFusionAllReduceUseBuffer(other.getNcclFusionAllReduceUseBuffer());
      }
      if (other.hasNcclFusionMaxOps()) {
        setNcclFusionMaxOps(other.getNcclFusionMaxOps());
      }
      if (other.hasNcclEnableAllToAll()) {
        setNcclEnableAllToAll(other.getNcclEnableAllToAll());
      }
      if (other.hasNcclEnableMixedFusion()) {
        setNcclEnableMixedFusion(other.getNcclEnableMixedFusion());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.oneflow.core.job.CollectiveBoxingConf parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.oneflow.core.job.CollectiveBoxingConf) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean enableFusion_ = true;
    /**
     * <pre>
     * global
     * </pre>
     *
     * <code>optional bool enable_fusion = 1 [default = true];</code>
     */
    public boolean hasEnableFusion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <pre>
     * global
     * </pre>
     *
     * <code>optional bool enable_fusion = 1 [default = true];</code>
     */
    public boolean getEnableFusion() {
      return enableFusion_;
    }
    /**
     * <pre>
     * global
     * </pre>
     *
     * <code>optional bool enable_fusion = 1 [default = true];</code>
     */
    public Builder setEnableFusion(boolean value) {
      bitField0_ |= 0x00000001;
      enableFusion_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * global
     * </pre>
     *
     * <code>optional bool enable_fusion = 1 [default = true];</code>
     */
    public Builder clearEnableFusion() {
      bitField0_ = (bitField0_ & ~0x00000001);
      enableFusion_ = true;
      onChanged();
      return this;
    }

    private long numCallbackThreads_ = 4L;
    /**
     * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
     */
    public boolean hasNumCallbackThreads() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
     */
    public long getNumCallbackThreads() {
      return numCallbackThreads_;
    }
    /**
     * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
     */
    public Builder setNumCallbackThreads(long value) {
      bitField0_ |= 0x00000002;
      numCallbackThreads_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 num_callback_threads = 2 [default = 4];</code>
     */
    public Builder clearNumCallbackThreads() {
      bitField0_ = (bitField0_ & ~0x00000002);
      numCallbackThreads_ = 4L;
      onChanged();
      return this;
    }

    private long ncclNumStreams_ = 1L;
    /**
     * <pre>
     * nccl
     * </pre>
     *
     * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
     */
    public boolean hasNcclNumStreams() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <pre>
     * nccl
     * </pre>
     *
     * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
     */
    public long getNcclNumStreams() {
      return ncclNumStreams_;
    }
    /**
     * <pre>
     * nccl
     * </pre>
     *
     * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
     */
    public Builder setNcclNumStreams(long value) {
      bitField0_ |= 0x00000004;
      ncclNumStreams_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * nccl
     * </pre>
     *
     * <code>optional int64 nccl_num_streams = 101 [default = 1];</code>
     */
    public Builder clearNcclNumStreams() {
      bitField0_ = (bitField0_ & ~0x00000004);
      ncclNumStreams_ = 1L;
      onChanged();
      return this;
    }

    private long ncclFusionThresholdMb_ = 16L;
    /**
     * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
     */
    public boolean hasNcclFusionThresholdMb() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
     */
    public long getNcclFusionThresholdMb() {
      return ncclFusionThresholdMb_;
    }
    /**
     * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
     */
    public Builder setNcclFusionThresholdMb(long value) {
      bitField0_ |= 0x00000008;
      ncclFusionThresholdMb_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 nccl_fusion_threshold_mb = 102 [default = 16];</code>
     */
    public Builder clearNcclFusionThresholdMb() {
      bitField0_ = (bitField0_ & ~0x00000008);
      ncclFusionThresholdMb_ = 16L;
      onChanged();
      return this;
    }

    private boolean ncclFusionAllReduce_ = true;
    /**
     * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
     */
    public boolean hasNcclFusionAllReduce() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
     */
    public boolean getNcclFusionAllReduce() {
      return ncclFusionAllReduce_;
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
     */
    public Builder setNcclFusionAllReduce(boolean value) {
      bitField0_ |= 0x00000010;
      ncclFusionAllReduce_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce = 103 [default = true];</code>
     */
    public Builder clearNcclFusionAllReduce() {
      bitField0_ = (bitField0_ & ~0x00000010);
      ncclFusionAllReduce_ = true;
      onChanged();
      return this;
    }

    private boolean ncclFusionReduceScatter_ ;
    /**
     * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
     */
    public boolean hasNcclFusionReduceScatter() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
     */
    public boolean getNcclFusionReduceScatter() {
      return ncclFusionReduceScatter_;
    }
    /**
     * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
     */
    public Builder setNcclFusionReduceScatter(boolean value) {
      bitField0_ |= 0x00000020;
      ncclFusionReduceScatter_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_reduce_scatter = 104 [default = false];</code>
     */
    public Builder clearNcclFusionReduceScatter() {
      bitField0_ = (bitField0_ & ~0x00000020);
      ncclFusionReduceScatter_ = false;
      onChanged();
      return this;
    }

    private boolean ncclFusionAllGather_ ;
    /**
     * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
     */
    public boolean hasNcclFusionAllGather() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
     */
    public boolean getNcclFusionAllGather() {
      return ncclFusionAllGather_;
    }
    /**
     * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
     */
    public Builder setNcclFusionAllGather(boolean value) {
      bitField0_ |= 0x00000040;
      ncclFusionAllGather_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_all_gather = 105 [default = false];</code>
     */
    public Builder clearNcclFusionAllGather() {
      bitField0_ = (bitField0_ & ~0x00000040);
      ncclFusionAllGather_ = false;
      onChanged();
      return this;
    }

    private boolean ncclFusionReduce_ = true;
    /**
     * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
     */
    public boolean hasNcclFusionReduce() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
     */
    public boolean getNcclFusionReduce() {
      return ncclFusionReduce_;
    }
    /**
     * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
     */
    public Builder setNcclFusionReduce(boolean value) {
      bitField0_ |= 0x00000080;
      ncclFusionReduce_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_reduce = 106 [default = true];</code>
     */
    public Builder clearNcclFusionReduce() {
      bitField0_ = (bitField0_ & ~0x00000080);
      ncclFusionReduce_ = true;
      onChanged();
      return this;
    }

    private boolean ncclFusionBroadcast_ = true;
    /**
     * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
     */
    public boolean hasNcclFusionBroadcast() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
     */
    public boolean getNcclFusionBroadcast() {
      return ncclFusionBroadcast_;
    }
    /**
     * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
     */
    public Builder setNcclFusionBroadcast(boolean value) {
      bitField0_ |= 0x00000100;
      ncclFusionBroadcast_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_broadcast = 107 [default = true];</code>
     */
    public Builder clearNcclFusionBroadcast() {
      bitField0_ = (bitField0_ & ~0x00000100);
      ncclFusionBroadcast_ = true;
      onChanged();
      return this;
    }

    private boolean ncclFusionAllReduceUseBuffer_ ;
    /**
     * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
     */
    public boolean hasNcclFusionAllReduceUseBuffer() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
     */
    public boolean getNcclFusionAllReduceUseBuffer() {
      return ncclFusionAllReduceUseBuffer_;
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
     */
    public Builder setNcclFusionAllReduceUseBuffer(boolean value) {
      bitField0_ |= 0x00000200;
      ncclFusionAllReduceUseBuffer_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_fusion_all_reduce_use_buffer = 108 [default = false];</code>
     */
    public Builder clearNcclFusionAllReduceUseBuffer() {
      bitField0_ = (bitField0_ & ~0x00000200);
      ncclFusionAllReduceUseBuffer_ = false;
      onChanged();
      return this;
    }

    private long ncclFusionMaxOps_ = 64L;
    /**
     * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
     */
    public boolean hasNcclFusionMaxOps() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
     */
    public long getNcclFusionMaxOps() {
      return ncclFusionMaxOps_;
    }
    /**
     * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
     */
    public Builder setNcclFusionMaxOps(long value) {
      bitField0_ |= 0x00000400;
      ncclFusionMaxOps_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int64 nccl_fusion_max_ops = 109 [default = 64];</code>
     */
    public Builder clearNcclFusionMaxOps() {
      bitField0_ = (bitField0_ & ~0x00000400);
      ncclFusionMaxOps_ = 64L;
      onChanged();
      return this;
    }

    private boolean ncclEnableAllToAll_ ;
    /**
     * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
     */
    public boolean hasNcclEnableAllToAll() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
     */
    public boolean getNcclEnableAllToAll() {
      return ncclEnableAllToAll_;
    }
    /**
     * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
     */
    public Builder setNcclEnableAllToAll(boolean value) {
      bitField0_ |= 0x00000800;
      ncclEnableAllToAll_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_enable_all_to_all = 110 [default = false];</code>
     */
    public Builder clearNcclEnableAllToAll() {
      bitField0_ = (bitField0_ & ~0x00000800);
      ncclEnableAllToAll_ = false;
      onChanged();
      return this;
    }

    private boolean ncclEnableMixedFusion_ ;
    /**
     * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
     */
    public boolean hasNcclEnableMixedFusion() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
     */
    public boolean getNcclEnableMixedFusion() {
      return ncclEnableMixedFusion_;
    }
    /**
     * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
     */
    public Builder setNcclEnableMixedFusion(boolean value) {
      bitField0_ |= 0x00001000;
      ncclEnableMixedFusion_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool nccl_enable_mixed_fusion = 111 [default = false];</code>
     */
    public Builder clearNcclEnableMixedFusion() {
      bitField0_ = (bitField0_ & ~0x00001000);
      ncclEnableMixedFusion_ = false;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:oneflow.CollectiveBoxingConf)
  }

  // @@protoc_insertion_point(class_scope:oneflow.CollectiveBoxingConf)
  private static final org.oneflow.core.job.CollectiveBoxingConf DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.oneflow.core.job.CollectiveBoxingConf();
  }

  public static org.oneflow.core.job.CollectiveBoxingConf getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<CollectiveBoxingConf>
      PARSER = new com.google.protobuf.AbstractParser<CollectiveBoxingConf>() {
    public CollectiveBoxingConf parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CollectiveBoxingConf(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CollectiveBoxingConf> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CollectiveBoxingConf> getParserForType() {
    return PARSER;
  }

  public org.oneflow.core.job.CollectiveBoxingConf getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

