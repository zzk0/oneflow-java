// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/resource.proto

package org.oneflow.core.job;

public interface ResourceOrBuilder extends
    // @@protoc_insertion_point(interface_extends:oneflow.Resource)
    com.google.protobuf.MessageOrBuilder {

  /**
   * <code>optional int32 machine_num = 1 [default = 0];</code>
   */
  boolean hasMachineNum();
  /**
   * <code>optional int32 machine_num = 1 [default = 0];</code>
   */
  int getMachineNum();

  /**
   * <code>optional int32 gpu_device_num = 4 [default = 0];</code>
   */
  boolean hasGpuDeviceNum();
  /**
   * <code>optional int32 gpu_device_num = 4 [default = 0];</code>
   */
  int getGpuDeviceNum();

  /**
   * <code>optional int32 cpu_device_num = 5 [default = 0];</code>
   */
  boolean hasCpuDeviceNum();
  /**
   * <code>optional int32 cpu_device_num = 5 [default = 0];</code>
   */
  int getCpuDeviceNum();

  /**
   * <code>optional int32 comm_net_worker_num = 6 [default = 4];</code>
   */
  boolean hasCommNetWorkerNum();
  /**
   * <code>optional int32 comm_net_worker_num = 6 [default = 4];</code>
   */
  int getCommNetWorkerNum();

  /**
   * <code>optional int32 max_mdsave_worker_num = 7 [default = 64];</code>
   */
  boolean hasMaxMdsaveWorkerNum();
  /**
   * <code>optional int32 max_mdsave_worker_num = 7 [default = 64];</code>
   */
  int getMaxMdsaveWorkerNum();

  /**
   * <code>optional bool use_rdma = 8 [default = false];</code>
   */
  boolean hasUseRdma();
  /**
   * <code>optional bool use_rdma = 8 [default = false];</code>
   */
  boolean getUseRdma();

  /**
   * <code>optional uint64 rdma_mem_block_mbyte = 9 [default = 8];</code>
   */
  boolean hasRdmaMemBlockMbyte();
  /**
   * <code>optional uint64 rdma_mem_block_mbyte = 9 [default = 8];</code>
   */
  long getRdmaMemBlockMbyte();

  /**
   * <code>optional uint64 rdma_recv_msg_buf_mbyte = 10 [default = 6];</code>
   */
  boolean hasRdmaRecvMsgBufMbyte();
  /**
   * <code>optional uint64 rdma_recv_msg_buf_mbyte = 10 [default = 6];</code>
   */
  long getRdmaRecvMsgBufMbyte();

  /**
   * <code>optional uint64 reserved_host_mem_mbyte = 12 [default = 500];</code>
   */
  boolean hasReservedHostMemMbyte();
  /**
   * <code>optional uint64 reserved_host_mem_mbyte = 12 [default = 500];</code>
   */
  long getReservedHostMemMbyte();

  /**
   * <code>optional uint64 reserved_device_mem_mbyte = 13 [default = 500];</code>
   */
  boolean hasReservedDeviceMemMbyte();
  /**
   * <code>optional uint64 reserved_device_mem_mbyte = 13 [default = 500];</code>
   */
  long getReservedDeviceMemMbyte();

  /**
   * <code>optional bool enable_numa_aware_cuda_malloc_host = 14 [default = false];</code>
   */
  boolean hasEnableNumaAwareCudaMallocHost();
  /**
   * <code>optional bool enable_numa_aware_cuda_malloc_host = 14 [default = false];</code>
   */
  boolean getEnableNumaAwareCudaMallocHost();

  /**
   * <code>optional int32 compute_thread_pool_size = 15;</code>
   */
  boolean hasComputeThreadPoolSize();
  /**
   * <code>optional int32 compute_thread_pool_size = 15;</code>
   */
  int getComputeThreadPoolSize();

  /**
   * <code>optional bool thread_enable_local_message_queue = 103 [default = false];</code>
   */
  boolean hasThreadEnableLocalMessageQueue();
  /**
   * <code>optional bool thread_enable_local_message_queue = 103 [default = false];</code>
   */
  boolean getThreadEnableLocalMessageQueue();

  /**
   * <code>optional bool enable_thread_local_cache = 16 [default = true];</code>
   */
  boolean hasEnableThreadLocalCache();
  /**
   * <code>optional bool enable_thread_local_cache = 16 [default = true];</code>
   */
  boolean getEnableThreadLocalCache();

  /**
   * <pre>
   * 64M
   * </pre>
   *
   * <code>optional int64 thread_local_cache_max_size = 17 [default = 67108864];</code>
   */
  boolean hasThreadLocalCacheMaxSize();
  /**
   * <pre>
   * 64M
   * </pre>
   *
   * <code>optional int64 thread_local_cache_max_size = 17 [default = 67108864];</code>
   */
  long getThreadLocalCacheMaxSize();

  /**
   * <code>optional bool enable_debug_mode = 18 [default = false];</code>
   */
  boolean hasEnableDebugMode();
  /**
   * <code>optional bool enable_debug_mode = 18 [default = false];</code>
   */
  boolean getEnableDebugMode();

  /**
   * <code>optional .oneflow.CollectiveBoxingConf collective_boxing_conf = 19;</code>
   */
  boolean hasCollectiveBoxingConf();
  /**
   * <code>optional .oneflow.CollectiveBoxingConf collective_boxing_conf = 19;</code>
   */
  org.oneflow.core.job.CollectiveBoxingConf getCollectiveBoxingConf();
  /**
   * <code>optional .oneflow.CollectiveBoxingConf collective_boxing_conf = 19;</code>
   */
  org.oneflow.core.job.CollectiveBoxingConfOrBuilder getCollectiveBoxingConfOrBuilder();

  /**
   * <code>optional bool enable_tensor_float_32_compute = 20 [default = true];</code>
   */
  boolean hasEnableTensorFloat32Compute();
  /**
   * <code>optional bool enable_tensor_float_32_compute = 20 [default = true];</code>
   */
  boolean getEnableTensorFloat32Compute();

  /**
   * <code>optional bool enable_mem_chain_merge = 21 [default = true];</code>
   */
  boolean hasEnableMemChainMerge();
  /**
   * <code>optional bool enable_mem_chain_merge = 21 [default = true];</code>
   */
  boolean getEnableMemChainMerge();

  /**
   * <pre>
   * NOTE(chengcheng) to reuse nccl memory and speed up
   * </pre>
   *
   * <code>optional bool nccl_use_compute_stream = 30 [default = false];</code>
   */
  boolean hasNcclUseComputeStream();
  /**
   * <pre>
   * NOTE(chengcheng) to reuse nccl memory and speed up
   * </pre>
   *
   * <code>optional bool nccl_use_compute_stream = 30 [default = false];</code>
   */
  boolean getNcclUseComputeStream();

  /**
   * <code>optional bool disable_group_boxing_by_dst_parallel = 31 [default = false];</code>
   */
  boolean hasDisableGroupBoxingByDstParallel();
  /**
   * <code>optional bool disable_group_boxing_by_dst_parallel = 31 [default = false];</code>
   */
  boolean getDisableGroupBoxingByDstParallel();

  /**
   * <code>optional .oneflow.CudnnConfig cudnn_conf = 32;</code>
   */
  boolean hasCudnnConf();
  /**
   * <code>optional .oneflow.CudnnConfig cudnn_conf = 32;</code>
   */
  org.oneflow.core.job.CudnnConfig getCudnnConf();
  /**
   * <code>optional .oneflow.CudnnConfig cudnn_conf = 32;</code>
   */
  org.oneflow.core.job.CudnnConfigOrBuilder getCudnnConfOrBuilder();
}
