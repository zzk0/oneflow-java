// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/resource.proto

package org.oneflow.core.job;

/**
 * Protobuf type {@code oneflow.CudnnConfig}
 */
public  final class CudnnConfig extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:oneflow.CudnnConfig)
    CudnnConfigOrBuilder {
  // Use CudnnConfig.newBuilder() to construct.
  private CudnnConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private CudnnConfig() {
    enableCudnn_ = true;
    cudnnBufLimitMbyte_ = 1024L;
    cudnnConvForceFwdAlgo_ = 0;
    cudnnConvForceBwdDataAlgo_ = 0;
    cudnnConvForceBwdFilterAlgo_ = 0;
    cudnnConvHeuristicSearchAlgo_ = true;
    cudnnConvUseDeterministicAlgoOnly_ = false;
    enableCudnnFusedNormalizationAddRelu_ = false;
    cudnnConvEnablePseudoHalf_ = true;
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  private CudnnConfig(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    this();
    int mutable_bitField0_ = 0;
    com.google.protobuf.UnknownFieldSet.Builder unknownFields =
        com.google.protobuf.UnknownFieldSet.newBuilder();
    try {
      boolean done = false;
      while (!done) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            done = true;
            break;
          default: {
            if (!parseUnknownField(input, unknownFields,
                                   extensionRegistry, tag)) {
              done = true;
            }
            break;
          }
          case 8: {
            bitField0_ |= 0x00000001;
            enableCudnn_ = input.readBool();
            break;
          }
          case 16: {
            bitField0_ |= 0x00000002;
            cudnnBufLimitMbyte_ = input.readInt64();
            break;
          }
          case 24: {
            bitField0_ |= 0x00000004;
            cudnnConvForceFwdAlgo_ = input.readInt32();
            break;
          }
          case 32: {
            bitField0_ |= 0x00000008;
            cudnnConvForceBwdDataAlgo_ = input.readInt32();
            break;
          }
          case 40: {
            bitField0_ |= 0x00000010;
            cudnnConvForceBwdFilterAlgo_ = input.readInt32();
            break;
          }
          case 48: {
            bitField0_ |= 0x00000020;
            cudnnConvHeuristicSearchAlgo_ = input.readBool();
            break;
          }
          case 56: {
            bitField0_ |= 0x00000040;
            cudnnConvUseDeterministicAlgoOnly_ = input.readBool();
            break;
          }
          case 64: {
            bitField0_ |= 0x00000080;
            enableCudnnFusedNormalizationAddRelu_ = input.readBool();
            break;
          }
          case 72: {
            bitField0_ |= 0x00000100;
            cudnnConvEnablePseudoHalf_ = input.readBool();
            break;
          }
        }
      }
    } catch (com.google.protobuf.InvalidProtocolBufferException e) {
      throw e.setUnfinishedMessage(this);
    } catch (java.io.IOException e) {
      throw new com.google.protobuf.InvalidProtocolBufferException(
          e).setUnfinishedMessage(this);
    } finally {
      this.unknownFields = unknownFields.build();
      makeExtensionsImmutable();
    }
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CudnnConfig_descriptor;
  }

  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CudnnConfig_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            org.oneflow.core.job.CudnnConfig.class, org.oneflow.core.job.CudnnConfig.Builder.class);
  }

  private int bitField0_;
  public static final int ENABLE_CUDNN_FIELD_NUMBER = 1;
  private boolean enableCudnn_;
  /**
   * <code>optional bool enable_cudnn = 1 [default = true];</code>
   */
  public boolean hasEnableCudnn() {
    return ((bitField0_ & 0x00000001) == 0x00000001);
  }
  /**
   * <code>optional bool enable_cudnn = 1 [default = true];</code>
   */
  public boolean getEnableCudnn() {
    return enableCudnn_;
  }

  public static final int CUDNN_BUF_LIMIT_MBYTE_FIELD_NUMBER = 2;
  private long cudnnBufLimitMbyte_;
  /**
   * <pre>
   * 1GByte
   * </pre>
   *
   * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
   */
  public boolean hasCudnnBufLimitMbyte() {
    return ((bitField0_ & 0x00000002) == 0x00000002);
  }
  /**
   * <pre>
   * 1GByte
   * </pre>
   *
   * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
   */
  public long getCudnnBufLimitMbyte() {
    return cudnnBufLimitMbyte_;
  }

  public static final int CUDNN_CONV_FORCE_FWD_ALGO_FIELD_NUMBER = 3;
  private int cudnnConvForceFwdAlgo_;
  /**
   * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
   */
  public boolean hasCudnnConvForceFwdAlgo() {
    return ((bitField0_ & 0x00000004) == 0x00000004);
  }
  /**
   * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
   */
  public int getCudnnConvForceFwdAlgo() {
    return cudnnConvForceFwdAlgo_;
  }

  public static final int CUDNN_CONV_FORCE_BWD_DATA_ALGO_FIELD_NUMBER = 4;
  private int cudnnConvForceBwdDataAlgo_;
  /**
   * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
   */
  public boolean hasCudnnConvForceBwdDataAlgo() {
    return ((bitField0_ & 0x00000008) == 0x00000008);
  }
  /**
   * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
   */
  public int getCudnnConvForceBwdDataAlgo() {
    return cudnnConvForceBwdDataAlgo_;
  }

  public static final int CUDNN_CONV_FORCE_BWD_FILTER_ALGO_FIELD_NUMBER = 5;
  private int cudnnConvForceBwdFilterAlgo_;
  /**
   * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
   */
  public boolean hasCudnnConvForceBwdFilterAlgo() {
    return ((bitField0_ & 0x00000010) == 0x00000010);
  }
  /**
   * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
   */
  public int getCudnnConvForceBwdFilterAlgo() {
    return cudnnConvForceBwdFilterAlgo_;
  }

  public static final int CUDNN_CONV_HEURISTIC_SEARCH_ALGO_FIELD_NUMBER = 6;
  private boolean cudnnConvHeuristicSearchAlgo_;
  /**
   * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
   */
  public boolean hasCudnnConvHeuristicSearchAlgo() {
    return ((bitField0_ & 0x00000020) == 0x00000020);
  }
  /**
   * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
   */
  public boolean getCudnnConvHeuristicSearchAlgo() {
    return cudnnConvHeuristicSearchAlgo_;
  }

  public static final int CUDNN_CONV_USE_DETERMINISTIC_ALGO_ONLY_FIELD_NUMBER = 7;
  private boolean cudnnConvUseDeterministicAlgoOnly_;
  /**
   * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
   */
  public boolean hasCudnnConvUseDeterministicAlgoOnly() {
    return ((bitField0_ & 0x00000040) == 0x00000040);
  }
  /**
   * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
   */
  public boolean getCudnnConvUseDeterministicAlgoOnly() {
    return cudnnConvUseDeterministicAlgoOnly_;
  }

  public static final int ENABLE_CUDNN_FUSED_NORMALIZATION_ADD_RELU_FIELD_NUMBER = 8;
  private boolean enableCudnnFusedNormalizationAddRelu_;
  /**
   * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
   */
  public boolean hasEnableCudnnFusedNormalizationAddRelu() {
    return ((bitField0_ & 0x00000080) == 0x00000080);
  }
  /**
   * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
   */
  public boolean getEnableCudnnFusedNormalizationAddRelu() {
    return enableCudnnFusedNormalizationAddRelu_;
  }

  public static final int CUDNN_CONV_ENABLE_PSEUDO_HALF_FIELD_NUMBER = 9;
  private boolean cudnnConvEnablePseudoHalf_;
  /**
   * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
   */
  public boolean hasCudnnConvEnablePseudoHalf() {
    return ((bitField0_ & 0x00000100) == 0x00000100);
  }
  /**
   * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
   */
  public boolean getCudnnConvEnablePseudoHalf() {
    return cudnnConvEnablePseudoHalf_;
  }

  private byte memoizedIsInitialized = -1;
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      output.writeBool(1, enableCudnn_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      output.writeInt64(2, cudnnBufLimitMbyte_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      output.writeInt32(3, cudnnConvForceFwdAlgo_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      output.writeInt32(4, cudnnConvForceBwdDataAlgo_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      output.writeInt32(5, cudnnConvForceBwdFilterAlgo_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      output.writeBool(6, cudnnConvHeuristicSearchAlgo_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      output.writeBool(7, cudnnConvUseDeterministicAlgoOnly_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      output.writeBool(8, enableCudnnFusedNormalizationAddRelu_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      output.writeBool(9, cudnnConvEnablePseudoHalf_);
    }
    unknownFields.writeTo(output);
  }

  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    if (((bitField0_ & 0x00000001) == 0x00000001)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(1, enableCudnn_);
    }
    if (((bitField0_ & 0x00000002) == 0x00000002)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt64Size(2, cudnnBufLimitMbyte_);
    }
    if (((bitField0_ & 0x00000004) == 0x00000004)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, cudnnConvForceFwdAlgo_);
    }
    if (((bitField0_ & 0x00000008) == 0x00000008)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(4, cudnnConvForceBwdDataAlgo_);
    }
    if (((bitField0_ & 0x00000010) == 0x00000010)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(5, cudnnConvForceBwdFilterAlgo_);
    }
    if (((bitField0_ & 0x00000020) == 0x00000020)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(6, cudnnConvHeuristicSearchAlgo_);
    }
    if (((bitField0_ & 0x00000040) == 0x00000040)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(7, cudnnConvUseDeterministicAlgoOnly_);
    }
    if (((bitField0_ & 0x00000080) == 0x00000080)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, enableCudnnFusedNormalizationAddRelu_);
    }
    if (((bitField0_ & 0x00000100) == 0x00000100)) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(9, cudnnConvEnablePseudoHalf_);
    }
    size += unknownFields.getSerializedSize();
    memoizedSize = size;
    return size;
  }

  private static final long serialVersionUID = 0L;
  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof org.oneflow.core.job.CudnnConfig)) {
      return super.equals(obj);
    }
    org.oneflow.core.job.CudnnConfig other = (org.oneflow.core.job.CudnnConfig) obj;

    boolean result = true;
    result = result && (hasEnableCudnn() == other.hasEnableCudnn());
    if (hasEnableCudnn()) {
      result = result && (getEnableCudnn()
          == other.getEnableCudnn());
    }
    result = result && (hasCudnnBufLimitMbyte() == other.hasCudnnBufLimitMbyte());
    if (hasCudnnBufLimitMbyte()) {
      result = result && (getCudnnBufLimitMbyte()
          == other.getCudnnBufLimitMbyte());
    }
    result = result && (hasCudnnConvForceFwdAlgo() == other.hasCudnnConvForceFwdAlgo());
    if (hasCudnnConvForceFwdAlgo()) {
      result = result && (getCudnnConvForceFwdAlgo()
          == other.getCudnnConvForceFwdAlgo());
    }
    result = result && (hasCudnnConvForceBwdDataAlgo() == other.hasCudnnConvForceBwdDataAlgo());
    if (hasCudnnConvForceBwdDataAlgo()) {
      result = result && (getCudnnConvForceBwdDataAlgo()
          == other.getCudnnConvForceBwdDataAlgo());
    }
    result = result && (hasCudnnConvForceBwdFilterAlgo() == other.hasCudnnConvForceBwdFilterAlgo());
    if (hasCudnnConvForceBwdFilterAlgo()) {
      result = result && (getCudnnConvForceBwdFilterAlgo()
          == other.getCudnnConvForceBwdFilterAlgo());
    }
    result = result && (hasCudnnConvHeuristicSearchAlgo() == other.hasCudnnConvHeuristicSearchAlgo());
    if (hasCudnnConvHeuristicSearchAlgo()) {
      result = result && (getCudnnConvHeuristicSearchAlgo()
          == other.getCudnnConvHeuristicSearchAlgo());
    }
    result = result && (hasCudnnConvUseDeterministicAlgoOnly() == other.hasCudnnConvUseDeterministicAlgoOnly());
    if (hasCudnnConvUseDeterministicAlgoOnly()) {
      result = result && (getCudnnConvUseDeterministicAlgoOnly()
          == other.getCudnnConvUseDeterministicAlgoOnly());
    }
    result = result && (hasEnableCudnnFusedNormalizationAddRelu() == other.hasEnableCudnnFusedNormalizationAddRelu());
    if (hasEnableCudnnFusedNormalizationAddRelu()) {
      result = result && (getEnableCudnnFusedNormalizationAddRelu()
          == other.getEnableCudnnFusedNormalizationAddRelu());
    }
    result = result && (hasCudnnConvEnablePseudoHalf() == other.hasCudnnConvEnablePseudoHalf());
    if (hasCudnnConvEnablePseudoHalf()) {
      result = result && (getCudnnConvEnablePseudoHalf()
          == other.getCudnnConvEnablePseudoHalf());
    }
    result = result && unknownFields.equals(other.unknownFields);
    return result;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptorForType().hashCode();
    if (hasEnableCudnn()) {
      hash = (37 * hash) + ENABLE_CUDNN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableCudnn());
    }
    if (hasCudnnBufLimitMbyte()) {
      hash = (37 * hash) + CUDNN_BUF_LIMIT_MBYTE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
          getCudnnBufLimitMbyte());
    }
    if (hasCudnnConvForceFwdAlgo()) {
      hash = (37 * hash) + CUDNN_CONV_FORCE_FWD_ALGO_FIELD_NUMBER;
      hash = (53 * hash) + getCudnnConvForceFwdAlgo();
    }
    if (hasCudnnConvForceBwdDataAlgo()) {
      hash = (37 * hash) + CUDNN_CONV_FORCE_BWD_DATA_ALGO_FIELD_NUMBER;
      hash = (53 * hash) + getCudnnConvForceBwdDataAlgo();
    }
    if (hasCudnnConvForceBwdFilterAlgo()) {
      hash = (37 * hash) + CUDNN_CONV_FORCE_BWD_FILTER_ALGO_FIELD_NUMBER;
      hash = (53 * hash) + getCudnnConvForceBwdFilterAlgo();
    }
    if (hasCudnnConvHeuristicSearchAlgo()) {
      hash = (37 * hash) + CUDNN_CONV_HEURISTIC_SEARCH_ALGO_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCudnnConvHeuristicSearchAlgo());
    }
    if (hasCudnnConvUseDeterministicAlgoOnly()) {
      hash = (37 * hash) + CUDNN_CONV_USE_DETERMINISTIC_ALGO_ONLY_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCudnnConvUseDeterministicAlgoOnly());
    }
    if (hasEnableCudnnFusedNormalizationAddRelu()) {
      hash = (37 * hash) + ENABLE_CUDNN_FUSED_NORMALIZATION_ADD_RELU_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getEnableCudnnFusedNormalizationAddRelu());
    }
    if (hasCudnnConvEnablePseudoHalf()) {
      hash = (37 * hash) + CUDNN_CONV_ENABLE_PSEUDO_HALF_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getCudnnConvEnablePseudoHalf());
    }
    hash = (29 * hash) + unknownFields.hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static org.oneflow.core.job.CudnnConfig parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.oneflow.core.job.CudnnConfig parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CudnnConfig parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static org.oneflow.core.job.CudnnConfig parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(org.oneflow.core.job.CudnnConfig prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code oneflow.CudnnConfig}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:oneflow.CudnnConfig)
      org.oneflow.core.job.CudnnConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CudnnConfig_descriptor;
    }

    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CudnnConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              org.oneflow.core.job.CudnnConfig.class, org.oneflow.core.job.CudnnConfig.Builder.class);
    }

    // Construct using org.oneflow.core.job.CudnnConfig.newBuilder()
    private Builder() {
      maybeForceBuilderInitialization();
    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);
      maybeForceBuilderInitialization();
    }
    private void maybeForceBuilderInitialization() {
      if (com.google.protobuf.GeneratedMessageV3
              .alwaysUseFieldBuilders) {
      }
    }
    public Builder clear() {
      super.clear();
      enableCudnn_ = true;
      bitField0_ = (bitField0_ & ~0x00000001);
      cudnnBufLimitMbyte_ = 1024L;
      bitField0_ = (bitField0_ & ~0x00000002);
      cudnnConvForceFwdAlgo_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      cudnnConvForceBwdDataAlgo_ = 0;
      bitField0_ = (bitField0_ & ~0x00000008);
      cudnnConvForceBwdFilterAlgo_ = 0;
      bitField0_ = (bitField0_ & ~0x00000010);
      cudnnConvHeuristicSearchAlgo_ = true;
      bitField0_ = (bitField0_ & ~0x00000020);
      cudnnConvUseDeterministicAlgoOnly_ = false;
      bitField0_ = (bitField0_ & ~0x00000040);
      enableCudnnFusedNormalizationAddRelu_ = false;
      bitField0_ = (bitField0_ & ~0x00000080);
      cudnnConvEnablePseudoHalf_ = true;
      bitField0_ = (bitField0_ & ~0x00000100);
      return this;
    }

    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return org.oneflow.core.job.ResourceOuterClass.internal_static_oneflow_CudnnConfig_descriptor;
    }

    public org.oneflow.core.job.CudnnConfig getDefaultInstanceForType() {
      return org.oneflow.core.job.CudnnConfig.getDefaultInstance();
    }

    public org.oneflow.core.job.CudnnConfig build() {
      org.oneflow.core.job.CudnnConfig result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    public org.oneflow.core.job.CudnnConfig buildPartial() {
      org.oneflow.core.job.CudnnConfig result = new org.oneflow.core.job.CudnnConfig(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
        to_bitField0_ |= 0x00000001;
      }
      result.enableCudnn_ = enableCudnn_;
      if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
        to_bitField0_ |= 0x00000002;
      }
      result.cudnnBufLimitMbyte_ = cudnnBufLimitMbyte_;
      if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
        to_bitField0_ |= 0x00000004;
      }
      result.cudnnConvForceFwdAlgo_ = cudnnConvForceFwdAlgo_;
      if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
        to_bitField0_ |= 0x00000008;
      }
      result.cudnnConvForceBwdDataAlgo_ = cudnnConvForceBwdDataAlgo_;
      if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
        to_bitField0_ |= 0x00000010;
      }
      result.cudnnConvForceBwdFilterAlgo_ = cudnnConvForceBwdFilterAlgo_;
      if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
        to_bitField0_ |= 0x00000020;
      }
      result.cudnnConvHeuristicSearchAlgo_ = cudnnConvHeuristicSearchAlgo_;
      if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
        to_bitField0_ |= 0x00000040;
      }
      result.cudnnConvUseDeterministicAlgoOnly_ = cudnnConvUseDeterministicAlgoOnly_;
      if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
        to_bitField0_ |= 0x00000080;
      }
      result.enableCudnnFusedNormalizationAddRelu_ = enableCudnnFusedNormalizationAddRelu_;
      if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
        to_bitField0_ |= 0x00000100;
      }
      result.cudnnConvEnablePseudoHalf_ = cudnnConvEnablePseudoHalf_;
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    public Builder clone() {
      return (Builder) super.clone();
    }
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.setField(field, value);
    }
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return (Builder) super.clearField(field);
    }
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return (Builder) super.clearOneof(oneof);
    }
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return (Builder) super.setRepeatedField(field, index, value);
    }
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return (Builder) super.addRepeatedField(field, value);
    }
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof org.oneflow.core.job.CudnnConfig) {
        return mergeFrom((org.oneflow.core.job.CudnnConfig)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(org.oneflow.core.job.CudnnConfig other) {
      if (other == org.oneflow.core.job.CudnnConfig.getDefaultInstance()) return this;
      if (other.hasEnableCudnn()) {
        setEnableCudnn(other.getEnableCudnn());
      }
      if (other.hasCudnnBufLimitMbyte()) {
        setCudnnBufLimitMbyte(other.getCudnnBufLimitMbyte());
      }
      if (other.hasCudnnConvForceFwdAlgo()) {
        setCudnnConvForceFwdAlgo(other.getCudnnConvForceFwdAlgo());
      }
      if (other.hasCudnnConvForceBwdDataAlgo()) {
        setCudnnConvForceBwdDataAlgo(other.getCudnnConvForceBwdDataAlgo());
      }
      if (other.hasCudnnConvForceBwdFilterAlgo()) {
        setCudnnConvForceBwdFilterAlgo(other.getCudnnConvForceBwdFilterAlgo());
      }
      if (other.hasCudnnConvHeuristicSearchAlgo()) {
        setCudnnConvHeuristicSearchAlgo(other.getCudnnConvHeuristicSearchAlgo());
      }
      if (other.hasCudnnConvUseDeterministicAlgoOnly()) {
        setCudnnConvUseDeterministicAlgoOnly(other.getCudnnConvUseDeterministicAlgoOnly());
      }
      if (other.hasEnableCudnnFusedNormalizationAddRelu()) {
        setEnableCudnnFusedNormalizationAddRelu(other.getEnableCudnnFusedNormalizationAddRelu());
      }
      if (other.hasCudnnConvEnablePseudoHalf()) {
        setCudnnConvEnablePseudoHalf(other.getCudnnConvEnablePseudoHalf());
      }
      this.mergeUnknownFields(other.unknownFields);
      onChanged();
      return this;
    }

    public final boolean isInitialized() {
      return true;
    }

    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      org.oneflow.core.job.CudnnConfig parsedMessage = null;
      try {
        parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        parsedMessage = (org.oneflow.core.job.CudnnConfig) e.getUnfinishedMessage();
        throw e.unwrapIOException();
      } finally {
        if (parsedMessage != null) {
          mergeFrom(parsedMessage);
        }
      }
      return this;
    }
    private int bitField0_;

    private boolean enableCudnn_ = true;
    /**
     * <code>optional bool enable_cudnn = 1 [default = true];</code>
     */
    public boolean hasEnableCudnn() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional bool enable_cudnn = 1 [default = true];</code>
     */
    public boolean getEnableCudnn() {
      return enableCudnn_;
    }
    /**
     * <code>optional bool enable_cudnn = 1 [default = true];</code>
     */
    public Builder setEnableCudnn(boolean value) {
      bitField0_ |= 0x00000001;
      enableCudnn_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool enable_cudnn = 1 [default = true];</code>
     */
    public Builder clearEnableCudnn() {
      bitField0_ = (bitField0_ & ~0x00000001);
      enableCudnn_ = true;
      onChanged();
      return this;
    }

    private long cudnnBufLimitMbyte_ = 1024L;
    /**
     * <pre>
     * 1GByte
     * </pre>
     *
     * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
     */
    public boolean hasCudnnBufLimitMbyte() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <pre>
     * 1GByte
     * </pre>
     *
     * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
     */
    public long getCudnnBufLimitMbyte() {
      return cudnnBufLimitMbyte_;
    }
    /**
     * <pre>
     * 1GByte
     * </pre>
     *
     * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
     */
    public Builder setCudnnBufLimitMbyte(long value) {
      bitField0_ |= 0x00000002;
      cudnnBufLimitMbyte_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * 1GByte
     * </pre>
     *
     * <code>optional int64 cudnn_buf_limit_mbyte = 2 [default = 1024];</code>
     */
    public Builder clearCudnnBufLimitMbyte() {
      bitField0_ = (bitField0_ & ~0x00000002);
      cudnnBufLimitMbyte_ = 1024L;
      onChanged();
      return this;
    }

    private int cudnnConvForceFwdAlgo_ ;
    /**
     * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
     */
    public boolean hasCudnnConvForceFwdAlgo() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
     */
    public int getCudnnConvForceFwdAlgo() {
      return cudnnConvForceFwdAlgo_;
    }
    /**
     * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
     */
    public Builder setCudnnConvForceFwdAlgo(int value) {
      bitField0_ |= 0x00000004;
      cudnnConvForceFwdAlgo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 cudnn_conv_force_fwd_algo = 3;</code>
     */
    public Builder clearCudnnConvForceFwdAlgo() {
      bitField0_ = (bitField0_ & ~0x00000004);
      cudnnConvForceFwdAlgo_ = 0;
      onChanged();
      return this;
    }

    private int cudnnConvForceBwdDataAlgo_ ;
    /**
     * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
     */
    public boolean hasCudnnConvForceBwdDataAlgo() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
     */
    public int getCudnnConvForceBwdDataAlgo() {
      return cudnnConvForceBwdDataAlgo_;
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
     */
    public Builder setCudnnConvForceBwdDataAlgo(int value) {
      bitField0_ |= 0x00000008;
      cudnnConvForceBwdDataAlgo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_data_algo = 4;</code>
     */
    public Builder clearCudnnConvForceBwdDataAlgo() {
      bitField0_ = (bitField0_ & ~0x00000008);
      cudnnConvForceBwdDataAlgo_ = 0;
      onChanged();
      return this;
    }

    private int cudnnConvForceBwdFilterAlgo_ ;
    /**
     * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
     */
    public boolean hasCudnnConvForceBwdFilterAlgo() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
     */
    public int getCudnnConvForceBwdFilterAlgo() {
      return cudnnConvForceBwdFilterAlgo_;
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
     */
    public Builder setCudnnConvForceBwdFilterAlgo(int value) {
      bitField0_ |= 0x00000010;
      cudnnConvForceBwdFilterAlgo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 cudnn_conv_force_bwd_filter_algo = 5;</code>
     */
    public Builder clearCudnnConvForceBwdFilterAlgo() {
      bitField0_ = (bitField0_ & ~0x00000010);
      cudnnConvForceBwdFilterAlgo_ = 0;
      onChanged();
      return this;
    }

    private boolean cudnnConvHeuristicSearchAlgo_ = true;
    /**
     * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
     */
    public boolean hasCudnnConvHeuristicSearchAlgo() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
     */
    public boolean getCudnnConvHeuristicSearchAlgo() {
      return cudnnConvHeuristicSearchAlgo_;
    }
    /**
     * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
     */
    public Builder setCudnnConvHeuristicSearchAlgo(boolean value) {
      bitField0_ |= 0x00000020;
      cudnnConvHeuristicSearchAlgo_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool cudnn_conv_heuristic_search_algo = 6 [default = true];</code>
     */
    public Builder clearCudnnConvHeuristicSearchAlgo() {
      bitField0_ = (bitField0_ & ~0x00000020);
      cudnnConvHeuristicSearchAlgo_ = true;
      onChanged();
      return this;
    }

    private boolean cudnnConvUseDeterministicAlgoOnly_ ;
    /**
     * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
     */
    public boolean hasCudnnConvUseDeterministicAlgoOnly() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
     */
    public boolean getCudnnConvUseDeterministicAlgoOnly() {
      return cudnnConvUseDeterministicAlgoOnly_;
    }
    /**
     * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
     */
    public Builder setCudnnConvUseDeterministicAlgoOnly(boolean value) {
      bitField0_ |= 0x00000040;
      cudnnConvUseDeterministicAlgoOnly_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool cudnn_conv_use_deterministic_algo_only = 7 [default = false];</code>
     */
    public Builder clearCudnnConvUseDeterministicAlgoOnly() {
      bitField0_ = (bitField0_ & ~0x00000040);
      cudnnConvUseDeterministicAlgoOnly_ = false;
      onChanged();
      return this;
    }

    private boolean enableCudnnFusedNormalizationAddRelu_ ;
    /**
     * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
     */
    public boolean hasEnableCudnnFusedNormalizationAddRelu() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
     */
    public boolean getEnableCudnnFusedNormalizationAddRelu() {
      return enableCudnnFusedNormalizationAddRelu_;
    }
    /**
     * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
     */
    public Builder setEnableCudnnFusedNormalizationAddRelu(boolean value) {
      bitField0_ |= 0x00000080;
      enableCudnnFusedNormalizationAddRelu_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool enable_cudnn_fused_normalization_add_relu = 8;</code>
     */
    public Builder clearEnableCudnnFusedNormalizationAddRelu() {
      bitField0_ = (bitField0_ & ~0x00000080);
      enableCudnnFusedNormalizationAddRelu_ = false;
      onChanged();
      return this;
    }

    private boolean cudnnConvEnablePseudoHalf_ = true;
    /**
     * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
     */
    public boolean hasCudnnConvEnablePseudoHalf() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
     */
    public boolean getCudnnConvEnablePseudoHalf() {
      return cudnnConvEnablePseudoHalf_;
    }
    /**
     * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
     */
    public Builder setCudnnConvEnablePseudoHalf(boolean value) {
      bitField0_ |= 0x00000100;
      cudnnConvEnablePseudoHalf_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional bool cudnn_conv_enable_pseudo_half = 9 [default = true];</code>
     */
    public Builder clearCudnnConvEnablePseudoHalf() {
      bitField0_ = (bitField0_ & ~0x00000100);
      cudnnConvEnablePseudoHalf_ = true;
      onChanged();
      return this;
    }
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:oneflow.CudnnConfig)
  }

  // @@protoc_insertion_point(class_scope:oneflow.CudnnConfig)
  private static final org.oneflow.core.job.CudnnConfig DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new org.oneflow.core.job.CudnnConfig();
  }

  public static org.oneflow.core.job.CudnnConfig getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  @java.lang.Deprecated public static final com.google.protobuf.Parser<CudnnConfig>
      PARSER = new com.google.protobuf.AbstractParser<CudnnConfig>() {
    public CudnnConfig parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
        return new CudnnConfig(input, extensionRegistry);
    }
  };

  public static com.google.protobuf.Parser<CudnnConfig> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<CudnnConfig> getParserForType() {
    return PARSER;
  }

  public org.oneflow.core.job.CudnnConfig getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

