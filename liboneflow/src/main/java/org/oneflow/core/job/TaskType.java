// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: oneflow/core/job/task.proto

package org.oneflow.core.job;

/**
 * Protobuf enum {@code oneflow.TaskType}
 */
public enum TaskType
    implements com.google.protobuf.ProtocolMessageEnum {
  /**
   * <code>kInvalid = 0;</code>
   */
  kInvalid(0),
  /**
   * <code>kNormalForward = 1;</code>
   */
  kNormalForward(1),
  /**
   * <code>kCopyHd = 12;</code>
   */
  kCopyHd(12),
  /**
   * <code>kCopyCommNet = 13;</code>
   */
  kCopyCommNet(13),
  /**
   * <code>kDeviceTick = 27;</code>
   */
  kDeviceTick(27),
  /**
   * <code>kDecodeRandom = 29;</code>
   */
  kDecodeRandom(29),
  /**
   * <code>kPack = 30;</code>
   */
  kPack(30),
  /**
   * <code>kUnpack = 32;</code>
   */
  kUnpack(32),
  /**
   * <code>kRepeat = 34;</code>
   */
  kRepeat(34),
  /**
   * <code>kAcc = 37;</code>
   */
  kAcc(37),
  /**
   * <code>kSrcSubsetTick = 38;</code>
   */
  kSrcSubsetTick(38),
  /**
   * <code>kDstSubsetTick = 39;</code>
   */
  kDstSubsetTick(39),
  /**
   * <code>kSourceTick = 40;</code>
   */
  kSourceTick(40),
  /**
   * <code>kTick = 41;</code>
   */
  kTick(41),
  /**
   * <code>kAccTick = 42;</code>
   */
  kAccTick(42),
  /**
   * <code>kCase = 43;</code>
   */
  kCase(43),
  /**
   * <code>kEsac = 44;</code>
   */
  kEsac(44),
  /**
   * <code>kWaitAndSendIds = 45;</code>
   */
  kWaitAndSendIds(45),
  /**
   * <code>kReentrantLock = 46;</code>
   */
  kReentrantLock(46),
  /**
   * <code>kCallbackNotify = 47;</code>
   */
  kCallbackNotify(47),
  /**
   * <code>kForeignInput = 48;</code>
   */
  kForeignInput(48),
  /**
   * <code>kForeignOutput = 49;</code>
   */
  kForeignOutput(49),
  /**
   * <code>kDistributeConcat = 55;</code>
   */
  kDistributeConcat(55),
  /**
   * <code>kDistributeSplit = 56;</code>
   */
  kDistributeSplit(56),
  /**
   * <code>kSliceBoxing = 57;</code>
   */
  kSliceBoxing(57),
  /**
   * <code>kCollectiveBoxingGeneric = 58;</code>
   */
  kCollectiveBoxingGeneric(58),
  /**
   * <code>kBoxingIdentity = 59;</code>
   */
  kBoxingIdentity(59),
  /**
   * <code>kDecodeH2D = 60;</code>
   */
  kDecodeH2D(60),
  /**
   * <code>kCollectiveBoxingPack = 61;</code>
   */
  kCollectiveBoxingPack(61),
  /**
   * <code>kCollectiveBoxingUnpack = 62;</code>
   */
  kCollectiveBoxingUnpack(62),
  /**
   * <code>kSspVariableProxy = 63;</code>
   */
  kSspVariableProxy(63),
  /**
   * <code>kBoxingZeros = 64;</code>
   */
  kBoxingZeros(64),
  ;

  /**
   * <code>kInvalid = 0;</code>
   */
  public static final int kInvalid_VALUE = 0;
  /**
   * <code>kNormalForward = 1;</code>
   */
  public static final int kNormalForward_VALUE = 1;
  /**
   * <code>kCopyHd = 12;</code>
   */
  public static final int kCopyHd_VALUE = 12;
  /**
   * <code>kCopyCommNet = 13;</code>
   */
  public static final int kCopyCommNet_VALUE = 13;
  /**
   * <code>kDeviceTick = 27;</code>
   */
  public static final int kDeviceTick_VALUE = 27;
  /**
   * <code>kDecodeRandom = 29;</code>
   */
  public static final int kDecodeRandom_VALUE = 29;
  /**
   * <code>kPack = 30;</code>
   */
  public static final int kPack_VALUE = 30;
  /**
   * <code>kUnpack = 32;</code>
   */
  public static final int kUnpack_VALUE = 32;
  /**
   * <code>kRepeat = 34;</code>
   */
  public static final int kRepeat_VALUE = 34;
  /**
   * <code>kAcc = 37;</code>
   */
  public static final int kAcc_VALUE = 37;
  /**
   * <code>kSrcSubsetTick = 38;</code>
   */
  public static final int kSrcSubsetTick_VALUE = 38;
  /**
   * <code>kDstSubsetTick = 39;</code>
   */
  public static final int kDstSubsetTick_VALUE = 39;
  /**
   * <code>kSourceTick = 40;</code>
   */
  public static final int kSourceTick_VALUE = 40;
  /**
   * <code>kTick = 41;</code>
   */
  public static final int kTick_VALUE = 41;
  /**
   * <code>kAccTick = 42;</code>
   */
  public static final int kAccTick_VALUE = 42;
  /**
   * <code>kCase = 43;</code>
   */
  public static final int kCase_VALUE = 43;
  /**
   * <code>kEsac = 44;</code>
   */
  public static final int kEsac_VALUE = 44;
  /**
   * <code>kWaitAndSendIds = 45;</code>
   */
  public static final int kWaitAndSendIds_VALUE = 45;
  /**
   * <code>kReentrantLock = 46;</code>
   */
  public static final int kReentrantLock_VALUE = 46;
  /**
   * <code>kCallbackNotify = 47;</code>
   */
  public static final int kCallbackNotify_VALUE = 47;
  /**
   * <code>kForeignInput = 48;</code>
   */
  public static final int kForeignInput_VALUE = 48;
  /**
   * <code>kForeignOutput = 49;</code>
   */
  public static final int kForeignOutput_VALUE = 49;
  /**
   * <code>kDistributeConcat = 55;</code>
   */
  public static final int kDistributeConcat_VALUE = 55;
  /**
   * <code>kDistributeSplit = 56;</code>
   */
  public static final int kDistributeSplit_VALUE = 56;
  /**
   * <code>kSliceBoxing = 57;</code>
   */
  public static final int kSliceBoxing_VALUE = 57;
  /**
   * <code>kCollectiveBoxingGeneric = 58;</code>
   */
  public static final int kCollectiveBoxingGeneric_VALUE = 58;
  /**
   * <code>kBoxingIdentity = 59;</code>
   */
  public static final int kBoxingIdentity_VALUE = 59;
  /**
   * <code>kDecodeH2D = 60;</code>
   */
  public static final int kDecodeH2D_VALUE = 60;
  /**
   * <code>kCollectiveBoxingPack = 61;</code>
   */
  public static final int kCollectiveBoxingPack_VALUE = 61;
  /**
   * <code>kCollectiveBoxingUnpack = 62;</code>
   */
  public static final int kCollectiveBoxingUnpack_VALUE = 62;
  /**
   * <code>kSspVariableProxy = 63;</code>
   */
  public static final int kSspVariableProxy_VALUE = 63;
  /**
   * <code>kBoxingZeros = 64;</code>
   */
  public static final int kBoxingZeros_VALUE = 64;


  public final int getNumber() {
    return value;
  }

  /**
   * @deprecated Use {@link #forNumber(int)} instead.
   */
  @java.lang.Deprecated
  public static TaskType valueOf(int value) {
    return forNumber(value);
  }

  public static TaskType forNumber(int value) {
    switch (value) {
      case 0: return kInvalid;
      case 1: return kNormalForward;
      case 12: return kCopyHd;
      case 13: return kCopyCommNet;
      case 27: return kDeviceTick;
      case 29: return kDecodeRandom;
      case 30: return kPack;
      case 32: return kUnpack;
      case 34: return kRepeat;
      case 37: return kAcc;
      case 38: return kSrcSubsetTick;
      case 39: return kDstSubsetTick;
      case 40: return kSourceTick;
      case 41: return kTick;
      case 42: return kAccTick;
      case 43: return kCase;
      case 44: return kEsac;
      case 45: return kWaitAndSendIds;
      case 46: return kReentrantLock;
      case 47: return kCallbackNotify;
      case 48: return kForeignInput;
      case 49: return kForeignOutput;
      case 55: return kDistributeConcat;
      case 56: return kDistributeSplit;
      case 57: return kSliceBoxing;
      case 58: return kCollectiveBoxingGeneric;
      case 59: return kBoxingIdentity;
      case 60: return kDecodeH2D;
      case 61: return kCollectiveBoxingPack;
      case 62: return kCollectiveBoxingUnpack;
      case 63: return kSspVariableProxy;
      case 64: return kBoxingZeros;
      default: return null;
    }
  }

  public static com.google.protobuf.Internal.EnumLiteMap<TaskType>
      internalGetValueMap() {
    return internalValueMap;
  }
  private static final com.google.protobuf.Internal.EnumLiteMap<
      TaskType> internalValueMap =
        new com.google.protobuf.Internal.EnumLiteMap<TaskType>() {
          public TaskType findValueByNumber(int number) {
            return TaskType.forNumber(number);
          }
        };

  public final com.google.protobuf.Descriptors.EnumValueDescriptor
      getValueDescriptor() {
    return getDescriptor().getValues().get(ordinal());
  }
  public final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }
  public static final com.google.protobuf.Descriptors.EnumDescriptor
      getDescriptor() {
    return org.oneflow.core.job.Task.getDescriptor()
        .getEnumTypes().get(0);
  }

  private static final TaskType[] VALUES = values();

  public static TaskType valueOf(
      com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
    if (desc.getType() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "EnumValueDescriptor is not for this type.");
    }
    return VALUES[desc.getIndex()];
  }

  private final int value;

  private TaskType(int value) {
    this.value = value;
  }

  // @@protoc_insertion_point(enum_scope:oneflow.TaskType)
}

